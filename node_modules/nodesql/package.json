{
  "name": "nodesql",
  "version": "0.2.4",
  "description": "Adaptor for node-mysql and node-sqlite3",
  "contributors": [
    {
      "name": "Brian Detering",
      "email": "bdeterin@gmail.com",
      "url": "http://www.briandetering.net/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/DubFriend/nodesql.git"
  },
  "bugs": {
    "url": "https://github.com/DubFriend/nodesql/issues"
  },
  "main": "nodesql.js",
  "dependencies": {
    "underscore": "~1.5.1",
    "q": "~0.9.7"
  },
  "devDependencies": {
    "mysql": "~2.1.1",
    "sqlite3": "~2.1.15"
  },
  "scripts": {
    "test": "nodeunit test.js"
  },
  "author": {
    "name": "Brian Detering",
    "email": "BDeterin@gmail.com",
    "url": "http://www.briandetering.net/"
  },
  "license": "MIT",
  "readme": "#NodeSQL\nAdaptor that wraps node-mysql and node-sqlite3 databases with a common interface.  The intention is to allow fast unit testing of the database with sqlite's in memory database.\n\n**NOTE** \\* indicates an optional parameter\n\n###Install\n\nvia npm\n\nnpm install nodesql\n\n###Setup\n\n```javascript\n//using mysql\nvar mysql      = require('mysql');\nvar connection = mysql.createConnection({\n  host     : 'example.org',\n  user     : 'bob',\n  password : 'secret',\n  database : 'databaseName',\n  //only set the multipleStatements setting if you plan on using the transaction\n  //method (and be careful) as it potentially exposes you to sql injection.\n  multipleStatements: true\n});\n\n//or for sqlite3\nvar sqlite3 = require('sqlite3').verbose();\nvar connection = new sqlite3.Database(':memory:');\n\n//wrap the database connection in a nodeSql adaptor.\nvar nodeSql = require('nodesql');\nvar db = nodeSql.createMySqlStrategy(connection);\n//or\nvar db = nodeSql.createSqliteStrategy(connection);\n```\n\n###db.query(sqlStatement, \\*values, \\*callback)\n\n**SELECT**\nIf no error occurs err will be null, and the second parameter will contain an array of rows.\n```javascript\ndb.query('SELECT * FROM Table', function (err, rows) {\n    if(!err) {\n        console.log(rows);\n    }\n    else {\n        console.log(\"An Error Occured\");\n        console.log(err);\n    }\n});\n```\n\n**INSERT**\nThe second parameter will be the id of the row that was just inserted.\n```javascript\ndb.query('INSERT INTO Table (col) VALUES (?)', ['columnValue'], function (err, insertId) {\n    if(!err) {\n        console.log(insertId)\n    }\n})\n```\n\n**UPDATE**\n```javascript\ndb.query('UPDATE ...', ..., function (err) {});\n```\n\n**DELETE**\n```javascript\ndb.query('DELETE ...', ..., function (err) {});\n```\n\n###db.one(statement, *values, *callback)\nreturns the first result of a select statement.\n```javascript\ndb.one('SELECT * FROM Table WHERE id = ?', [5], function (err, row) {\n    //row is the first element of what would normally be\n    //an array of rows.\n});\n```\n\n###db.select(table, *whereEqualsObject, *callback)\n```javascript\n//equivalent to db.query('SELECT * FROM Table WHERE id = ?', [5], function (err, rows) {});\ndb.select('Table', { id: 5 }, function (err, rows) {});\n```\n\n###db.selectOne(table, whereEqualsObject, *callback)\nreturns the first result of select\n```javascript\ndb.selectOne('Table', { id: 5 }, function (err, row) {\n    //row is the first element of what would normally be\n    //an array of rows.\n})\n```\n\n###db.insert(table, row, *callback)\n```javascript\n//equivalent to db.query('INSERT INTO Table (col) VALUES (?)', ['foo'], function (err, insertId) {});\ndb.insert('Table', { col: 'foo' }, function (err, insertId) {});\n```\n\n###db.update(table, rowEdits, whereEqualsObject, *callback)\n```javascript\n//equivalent to db.query('UPDATE Table SET col = ? WHERE id = ?', ['edit', 5], function (err) {});\ndb.update('Table', { col: 'edit' }, { id: 5 }, function (err) {});\n```\n\n###db.delete(table, whereEqualsObject, *callback)\n```javascript\n//equivalent to db.query('DELETE FROM Table WHERE id = ?', [5], function (err) {});\ndb.delete('Table', { id: 5 }, function (err) {});\n```\n\n###db.transaction(statements, *callback)\nperform multiple sql statements that will be wrapped in a transaction.\n```javascript\ndb.transaction(['INSERT INTO ...', 'INSERT INTO ...']);\n```\n\n##db.escape(value)\nescapes a value used in query to protect against sql injection.\nusing a prepared statement is preferred.\nWarning: No Escaping is actually implemented for sqlite! (simply returns value)\n\n##Promises\n\nAll NodeSQL that take callbacks also return Q promises.\n\n```javascript\ndb.select('Table', {id: 5}).then(\n    function (rows) {},\n    function (err) {}\n);\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/DubFriend/nodesql",
  "_id": "nodesql@0.2.4",
  "dist": {
    "shasum": "0843d1016d2f5271cdfa0dd8b52aa9fd68212083"
  },
  "_from": "nodesql@",
  "_resolved": "https://registry.npmjs.org/nodesql/-/nodesql-0.2.4.tgz"
}
